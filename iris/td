#!/bin/bash

# TODO: is there a way to abstract checking those subfolders every time?

function print_help {
	echo -e "usage:"
	echo -e "\ttd e [subfolder] - open todo.txt in editor"
	echo -e "\ttd a '[(TODO|STRT|...): ]item' [subfolder] - add item to todo.txt"
	echo -e "\ttd ls [-r] [subfolder] - display all of the todo items in the todo.txt"
	echo -e "\ttd set (old line) (newstate) [subfolder|file] - display all of the todo items in the todo.txt"
}

if [[ "$#" -lt 1 ]]; then
	print_help
	exit
fi

if [[ "$1" == "e" ]]; then
	# -- OPEN FOR EDITING
	loc="."
	shift
	if [ -n "$1" ]; then
		loc=$1
	fi
	
	mkdir -p $loc
	# TODO: set this to $EDITOR
	nvim $loc/todo.txt
elif [[ "$1" == "a" ]]; then
	# -- ADD AN ITEM
	shift
	state="TODO: "
	line=""

	# check if state was given in the string itself or not
	# TODO: see grep way down in ls, bet there's easier way to do this
	if echo $1 | grep -q "^TODO:" || echo $1 | grep -q "^STRT:" || echo $1 | grep -q "^WAIT:" || echo $1 | grep -q "^DONE:" || echo $1 | grep -q "^CANC:"
	then
		line=$1
	else
		line="${state}${1}" # no state given, add the state to it
	fi

	# handle subfolders
	loc="."
	shift
	if [ -n "$1" ]; then
		loc=$1
	fi
	
	mkdir -p $loc
	echo $line >> $loc/todo.txt
	# TODO: add in ls capabilities

elif [[ "$1" == "ls" ]]; then
	# -- list the things
	# NOTE: we're only in charge of listing all the things, not filtering or displaying or anything else. td is not a graphical utility
	shift
	target="."
	recurse=1

	while [ -n "$1" ]; do
		if [[ "$1" == "-r" ]]; then
			recurse=0
		else
			target=$1
		fi
		shift
	done
	
	# NOTE: the 2> /dev/null is to suppress permission denied errors https://stackoverflow.com/questions/36016413/how-can-i-exclude-all-permission-denied-result-lines-from-grep
	if [ "$recurse" -eq 0 ]; then
		grep -RE --color=never --include="todo.txt" '(TODO|STRT|WAIT|DONE|CANC)' $target 2> /dev/null
	else
		grep -E --color=never '(TODO|STRT|WAIT|DONE|CANC)' $target/todo.txt 2> /dev/null
	fi
elif [[ "$1" == "set" ]]; then
	# -- change a todo item in a file

	# TODO: error handling
	# get the item
	shift
	line=$1
	
	# get new state
	shift
	state=$1
	
	# get loc
	loc="todo.txt"
	shift

	if [ -n "$1" ]; then
		# check if dir or file
		loc=$1
		if [[ -d "$loc" ]]; then
			loc="$loc/todo.txt"
		fi
	fi
	
	setline=$(td-state "$line" $state)
	
	ESCAPED_KEYWORD=$(echo $line | sed -e 's/[]\/$*.^[]/\\&/g');
	ESCAPED_REPLACE=$(echo $setline | sed -e 's/[\/&]/\\&/g')

	sed -i "s/$ESCAPED_KEYWORD/$ESCAPED_REPLACE/" "$loc"
fi
